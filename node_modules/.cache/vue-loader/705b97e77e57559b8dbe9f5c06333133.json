{"remainingRequest":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\west-master\\packages\\server\\HTML\\vue\\test\\src\\phone\\apps\\contacts.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\src\\phone\\apps\\contacts.vue","mtime":1558952847000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nexport default {\n    data() {\n        const character = ['#',\"А\",\"Б\",\"В\",\"Г\",\"Д\",\"Е\",\"Ж\",\"З\",\"И\",\"Й\",\"К\",\"Л\",\"М\",\"Н\",\"О\",\"П\",\"Р\",\"С\",\"Т\",\"У\",\"Ф\",\"Х\",\"Ц\",\"Ч\",\"Ш\",\"Щ\",\"Ъ\",\"Ы\",\"Ь\",\"Э\",\"Ю\",\"Я\" ,'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n        return {\n            character,\n            showNewContact: false,\n            filter: '',\n        };\n    },\n    props: {\n        'phone': Number,\n        contacts: Array\n    },\n    created(){\n        mp.on(\"PHONE::ADD_CONTACT_CALLBACK\",(name,number)=>{\n            this.contacts.push({\n                name:name+\"\",\n                number\n            })\n        })\n        mp.on(\"PHONE::DEL_CONTACT_CALLBACK\",(contact)=>{\n            let idx = this.contacts.findIndex((cont)=>{\n                if(contact.name == cont.name && contact.number == cont.number)return true;\n            });\n            if(idx != -1)this.contacts.splice(idx,1)\n        })\n    },\n    computed: {\n        filteredContacts: function () {\n            try{\n                const vm = this\n                const result = {}\n                const filter = this.filter.length > 0 ? this.filter.toLowerCase() : false\n                let contacts = this.contacts;\n                \n                contacts.forEach(function (c) {\n                    if (filter) {\n                        if (c.name.toLowerCase().indexOf(filter) === -1 && (!c.remark || c.remark.toLowerCase().indexOf(filter) === -1)) {\n                            return\n                        }\n                    }\n                    const char = \"\"+c.name[0].toUpperCase();\n                    if (vm.character.indexOf(char) > -1) {\n                        if (!result[char]) {\n                            result[char] = []\n                        }\n                        result[char].push(c)\n                    } else {\n                        if (!result['#']) {\n                            result['#'] = []\n                        }\n                        result['#'].push(c)\n                    }\n                })\n                return result\n            }catch(e){\n                console.log(e)\n            }\n        },\n        filteredCharacter(){\n            if(!this.filteredContacts) return [];\n            return this.character.filter((char)=>{\n                if(this.filteredContacts[char])return true;\n            })\n        }\n    },\n    components:{\n    },\n    methods: {\n        back(){\n            if(this.showNewContact)return this.showNewContact = false;\n            this.$emit('back')\n        },\n        openNewContacts(){\n            this.showNewContact = true;\n        },\n        addContact(){\n            let name = this.name;\n            let number = parseInt(this.number);\n            this.showNewContact = false;\n            mp.trigger('CallRemote','PHONE::ADD_CONTACT',name,number);\n        },\n        delContact(contact){\n            mp.trigger('CallRemote','PHONE::DEL_CONTACT',JSON.stringify(contact));\n        },\n        call(number){\n            mp.trigger('CallRemote','PHONE::CALL',number);\n        },\n        callDefault(call){\n            mp.trigger('CallRemote',call);\n\n        }\n    },\n  };\n  // Well, hu, you have no module so just keep your component somewhere.\n",{"version":3,"sources":["contacts.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"contacts.vue","sourceRoot":"src/phone/apps","sourcesContent":["<template>\n    <div class=\"contacts\" >\n        <div class=\"title\">\n            <div class=\"back\" @click=\"back\">\n                <i class=\"fal fa-angle-left\" ></i>\n            </div>\n            <h1>Контакты</h1>\n            <div class=\"right\" >\n                <i class=\"fal fa-plus\" v-if=\"!showNewContact\" @click=\"openNewContacts\"></i>\n                <i class=\"fal fa-times exit\" v-else @click=\"showNewContact = false\"></i>\n            </div>\n        </div>\n        <div class=\"padding\">\n            <div class=\"myPhone\">\n                <div class=\"icon\">\n                    <i class=\"iw contact_avatar\"></i>\n                </div>\n                <div class=\"right\">\n                    <h3>\n                        Ваш номер\n                    </h3>\n                    <span>{{phone}}</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"contacts\" >\n            <div class=\"character\" v-for=\"char in filteredCharacter\"  :key=\"char\">\n                <div class=\"contact\">\n                    <div class=\"padding\">\n                        {{char}}\n                    </div>\n                    <div class=\"name\" v-for=\"(contact, key) in filteredContacts[char]\" :key=\"key\" @click=\"contact.callRemote ? callDefault(contact.callRemote) : call(contact.number)\">\n                        {{contact.name}}<div class=\"right\" v-if=\"!contact.callRemote\"><i class=\"fal fa-times\" @click=\"delContact(contact)\"></i></div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"newContacts\" v-if=\"showNewContact\">\n            <div class=\"padding\">\n                <h1 >Новый контакт</h1>\n                <input type=\"text\" placeholder=\"Имя\" v-model=\"name\">\n                <input type=\"number\" placeholder=\"Номер\" v-model=\"number\">\n                <div class=\"but\" @click=\"addContact\">Добавить</div>\n            </div>\n        </div>\n    </div>\n</template>\n<style src=\"../../../styles/phone/contacts.scss\" lang=\"scss\"></style>\n\n<script>\n\n\nexport default {\n    data() {\n        const character = ['#',\"А\",\"Б\",\"В\",\"Г\",\"Д\",\"Е\",\"Ж\",\"З\",\"И\",\"Й\",\"К\",\"Л\",\"М\",\"Н\",\"О\",\"П\",\"Р\",\"С\",\"Т\",\"У\",\"Ф\",\"Х\",\"Ц\",\"Ч\",\"Ш\",\"Щ\",\"Ъ\",\"Ы\",\"Ь\",\"Э\",\"Ю\",\"Я\" ,'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n        return {\n            character,\n            showNewContact: false,\n            filter: '',\n        };\n    },\n    props: {\n        'phone': Number,\n        contacts: Array\n    },\n    created(){\n        mp.on(\"PHONE::ADD_CONTACT_CALLBACK\",(name,number)=>{\n            this.contacts.push({\n                name:name+\"\",\n                number\n            })\n        })\n        mp.on(\"PHONE::DEL_CONTACT_CALLBACK\",(contact)=>{\n            let idx = this.contacts.findIndex((cont)=>{\n                if(contact.name == cont.name && contact.number == cont.number)return true;\n            });\n            if(idx != -1)this.contacts.splice(idx,1)\n        })\n    },\n    computed: {\n        filteredContacts: function () {\n            try{\n                const vm = this\n                const result = {}\n                const filter = this.filter.length > 0 ? this.filter.toLowerCase() : false\n                let contacts = this.contacts;\n                \n                contacts.forEach(function (c) {\n                    if (filter) {\n                        if (c.name.toLowerCase().indexOf(filter) === -1 && (!c.remark || c.remark.toLowerCase().indexOf(filter) === -1)) {\n                            return\n                        }\n                    }\n                    const char = \"\"+c.name[0].toUpperCase();\n                    if (vm.character.indexOf(char) > -1) {\n                        if (!result[char]) {\n                            result[char] = []\n                        }\n                        result[char].push(c)\n                    } else {\n                        if (!result['#']) {\n                            result['#'] = []\n                        }\n                        result['#'].push(c)\n                    }\n                })\n                return result\n            }catch(e){\n                console.log(e)\n            }\n        },\n        filteredCharacter(){\n            if(!this.filteredContacts) return [];\n            return this.character.filter((char)=>{\n                if(this.filteredContacts[char])return true;\n            })\n        }\n    },\n    components:{\n    },\n    methods: {\n        back(){\n            if(this.showNewContact)return this.showNewContact = false;\n            this.$emit('back')\n        },\n        openNewContacts(){\n            this.showNewContact = true;\n        },\n        addContact(){\n            let name = this.name;\n            let number = parseInt(this.number);\n            this.showNewContact = false;\n            mp.trigger('CallRemote','PHONE::ADD_CONTACT',name,number);\n        },\n        delContact(contact){\n            mp.trigger('CallRemote','PHONE::DEL_CONTACT',JSON.stringify(contact));\n        },\n        call(number){\n            mp.trigger('CallRemote','PHONE::CALL',number);\n        },\n        callDefault(call){\n            mp.trigger('CallRemote',call);\n\n        }\n    },\n  };\n  // Well, hu, you have no module so just keep your component somewhere.\n</script>"]}]}
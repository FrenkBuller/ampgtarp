{"remainingRequest":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\west-master\\packages\\server\\HTML\\vue\\test\\src\\phone\\apps\\sms.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\src\\phone\\apps\\sms.vue","mtime":1558952847000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\west-master\\packages\\server\\HTML\\vue\\test\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\nlet sms = {\n    data() {\n        return {\n            showNewSms: false,\n            dialog: undefined,\n            numberSend: '',\n            messageSend: '',\n            messageText: ''\n        };\n    },\n    props: {\n        'phone': Number,\n        dialogs: Array,\n        contacts: Array\n    },\n    beforeMount() {\n        \n    },\n    components:{\n    },\n    created() {\n        mp.on(\"PHONE::SEND_MESSAGE_CALLBACK\",(number,messageInfo)=>{\n            this.addSMS(number,messageInfo)\n        })\n        mp.on('PHONE::MESSAGE_CAME',(number,messageInfo)=>{\n            if(this.dialog && number != this.dialog.number && !this.sleeping) mp.trigger('alert','Вам пришло сообщение от '+this.getTextContact(number))\n        })\n    },\n    methods: {\n        back(){\n            if(this.showNewSms)return this.showNewSms = false;\n            if(this.dialog)return this.dialog = undefined;\n            this.$emit('back')\n        },\n        openDialog(mesage){\n            this.dialog = mesage;\n            this.$nextTick(function () {\n                this.scrollBottom();\n            })\n        },\n        openNewSMS(){\n            this.showNewSms = true;\n        },\n        addSMS(number,messageInfo){\n            let index;\n            let dialog = this.dialogs.find((d,i)=>{\n                 if(d.number.toString() == number.toString()){\n                     index = i;\n                     return true\n                 };\n            })\n            if(!dialog){\n                this.dialogs.push({\n                    number: number,\n                    messages: [messageInfo] \n                })\n            }else{\n                this.dialogs[index].messages.push(messageInfo)\n            }\n        },\n        sendNewMessage(){\n            let message = this.messageSend;\n            let number = parseInt(this.numberSend);\n            this.showNewSms = false;\n            mp.trigger('CallRemote','PHONE::SEND_MESSAGE',number,message);\n        },\n        sendMessage(){\n            let message = this.messageText;\n            let number = parseInt(this.dialog.number);\n            this.showNewSms = false;\n            mp.trigger('CallRemote','PHONE::SEND_MESSAGE',number,message,(messageInfo)=>{\n                this.messageText = '';\n                this.addSMS(number,messageInfo)\n                this.$nextTick(function () {\n                    this.scrollBottom();\n                })\n            });\n        },\n        getTime(time){\n            let date = new Date(time);\n            return `${date.getHours()}:${date.getMinutes()}`\n        },\n        scrollBottom(){\n            this.$refs.messages.scrollTo(0,this.$refs.messages.scrollHeight)\n        },\n        getTextContact(number){\n            let contact = this.contacts.find((contact)=>{\n                return contact.number == number\n            })\n            if(contact)return contact.name;\n            else return number;\n        },\n        gpsSend(){\n            let number = parseInt(this.dialog.number);\n            mp.trigger(\"PHONE::GPS_SEND\",number);\n        },\n        setGPS(message){\n            mp.trigger(\"PHONE::SET_GPS\",JSON.stringify(message.position));\n        },\n        delMessage(message){\n             mp.trigger('CallRemote','PHONE::DEL_MESSAGE',this.dialog.number,message);\n        },\n        getLastText(mesage){\n            let last = mesage.messages[mesage.messages.length-1];\n            return last.text ? last.text : last.textStreeet;\n        }\n    },\n  };\n\nexport default sms;\n",{"version":3,"sources":["sms.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"sms.vue","sourceRoot":"src/phone/apps","sourcesContent":["<template>\n    <div class=\"sms\" >\n        <div class=\"newSms\" v-if=\"showNewSms\">\n            <div class=\"title\">\n                <div class=\"back\" @click=\"back\">\n                    <i class=\"fal fa-angle-left\" ></i>\n                </div>\n                <h1>Сообщения</h1>\n            </div>\n            <div class=\"main\" >\n                <div class=\"padding\">\n                    <input placeholder=\"Номер телефона\" type=\"number\" v-model=\"numberSend\">\n                    <textarea placeholder=\"Сообщение\" v-model=\"messageSend\"></textarea>\n                    <div class=\"but\" @click=\"sendNewMessage\">Отправить</div>\n                </div>\n            </div>\n        </div>\n        <div class=\"messages\" v-if=\"!showNewSms && !dialog\">\n            <div class=\"title\">\n                <div class=\"back\">\n                    <i class=\"fal fa-angle-left\" @click=\"back\"></i>\n                </div>\n                <h1>Сообщения</h1>\n                <div class=\"right\" @click=\"openNewSMS\">\n                    <i class=\"iw send_msg\" ></i>\n                </div>\n            </div>\n            <div class=\"items\" >\n                <div class=\"padding\">\n                    <div class=\"item\" v-for=\"(mesage,i) in dialogs\" :key=\"i\" @click=\"openDialog(mesage) \">\n                        <div class=\"icon\">\n                            <i class=\"iw contact_avatar\"></i>\n                        </div>\n                        <div class=\"right\">\n                            <div class=\"top\">\n                                <div class=\"name\">{{getTextContact(mesage.number)}}</div>\n                                <div class=\"time\">{{mesage.time}}</div>\n                            </div>\n                            <div class=\"bottom\">\n                                <div class=\"discription\">{{getLastText(mesage)}}</div>\n                                <div class=\"arrow\"><i class=\"fal fa-angle-right\"></i></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"dialog\" v-else-if=\"!showNewSms\">\n            <div class=\"title\">\n                <div class=\"back\">\n                    <i class=\"fal fa-angle-left\" @click=\"back\"></i>\n                </div>\n                <h1>{{getTextContact(dialog.number)}}</h1>\n                <div class=\"right\" >\n                    <div class=\"gpsSend\" @click=\"gpsSend\"><i class=\"fas fa-map-marker-alt\"></i></div>\n                </div>\n            </div>\n            <div class=\"messages\" ref=\"messages\">\n                <div class=\"message\" v-for=\"(message,i) in dialog.messages\" :key=\"i\" :class=\"{'my-message':message.phone==phone}\">\n                    <div class=\"del\" @click=\"delMessage(message)\">\n                        <i class=\"fal fa-times\"></i>\n                    </div>\n                    <div v-if=\"message.textStreeet\">\n                        <div class=\"text\">{{message.textStreeet}}</div>\n                        <div class=\"time\">\n                            <div class=\"but\" @click=\"setGPS(message)\">Поставить метку <i class=\"fas fa-map-marker-alt\"></i></div>\n                            <div>{{getTime(message.time)}}</div>\n                        </div>\n                        \n                    </div>\n                    <div v-else>\n                        <div class=\"text\">{{message.text}}</div>\n                        <div class=\"time\">{{getTime(message.time)}}</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"textarea\">\n                <textarea placeholder=\"Напишите что-нибудь\" v-model=\"messageText\" v-on:keydown.enter=\"sendMessage\" cols=\"30\" rows=\"10\" ></textarea>\n                <div class=\"send\" @click=\"sendMessage\"><i class=\"iw gps\"></i></div>\n            </div>\n        </div>\n    </div>\n</template>\n<style src=\"../../../styles/phone/sms.scss\" lang=\"scss\"></style>\n\n<script>\n\n\nlet sms = {\n    data() {\n        return {\n            showNewSms: false,\n            dialog: undefined,\n            numberSend: '',\n            messageSend: '',\n            messageText: ''\n        };\n    },\n    props: {\n        'phone': Number,\n        dialogs: Array,\n        contacts: Array\n    },\n    beforeMount() {\n        \n    },\n    components:{\n    },\n    created() {\n        mp.on(\"PHONE::SEND_MESSAGE_CALLBACK\",(number,messageInfo)=>{\n            this.addSMS(number,messageInfo)\n        })\n        mp.on('PHONE::MESSAGE_CAME',(number,messageInfo)=>{\n            if(this.dialog && number != this.dialog.number && !this.sleeping) mp.trigger('alert','Вам пришло сообщение от '+this.getTextContact(number))\n        })\n    },\n    methods: {\n        back(){\n            if(this.showNewSms)return this.showNewSms = false;\n            if(this.dialog)return this.dialog = undefined;\n            this.$emit('back')\n        },\n        openDialog(mesage){\n            this.dialog = mesage;\n            this.$nextTick(function () {\n                this.scrollBottom();\n            })\n        },\n        openNewSMS(){\n            this.showNewSms = true;\n        },\n        addSMS(number,messageInfo){\n            let index;\n            let dialog = this.dialogs.find((d,i)=>{\n                 if(d.number.toString() == number.toString()){\n                     index = i;\n                     return true\n                 };\n            })\n            if(!dialog){\n                this.dialogs.push({\n                    number: number,\n                    messages: [messageInfo] \n                })\n            }else{\n                this.dialogs[index].messages.push(messageInfo)\n            }\n        },\n        sendNewMessage(){\n            let message = this.messageSend;\n            let number = parseInt(this.numberSend);\n            this.showNewSms = false;\n            mp.trigger('CallRemote','PHONE::SEND_MESSAGE',number,message);\n        },\n        sendMessage(){\n            let message = this.messageText;\n            let number = parseInt(this.dialog.number);\n            this.showNewSms = false;\n            mp.trigger('CallRemote','PHONE::SEND_MESSAGE',number,message,(messageInfo)=>{\n                this.messageText = '';\n                this.addSMS(number,messageInfo)\n                this.$nextTick(function () {\n                    this.scrollBottom();\n                })\n            });\n        },\n        getTime(time){\n            let date = new Date(time);\n            return `${date.getHours()}:${date.getMinutes()}`\n        },\n        scrollBottom(){\n            this.$refs.messages.scrollTo(0,this.$refs.messages.scrollHeight)\n        },\n        getTextContact(number){\n            let contact = this.contacts.find((contact)=>{\n                return contact.number == number\n            })\n            if(contact)return contact.name;\n            else return number;\n        },\n        gpsSend(){\n            let number = parseInt(this.dialog.number);\n            mp.trigger(\"PHONE::GPS_SEND\",number);\n        },\n        setGPS(message){\n            mp.trigger(\"PHONE::SET_GPS\",JSON.stringify(message.position));\n        },\n        delMessage(message){\n             mp.trigger('CallRemote','PHONE::DEL_MESSAGE',this.dialog.number,message);\n        },\n        getLastText(mesage){\n            let last = mesage.messages[mesage.messages.length-1];\n            return last.text ? last.text : last.textStreeet;\n        }\n    },\n  };\n\nexport default sms;\n</script>"]}]}